service: srvrlss-site-blaubleu
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: prod
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    USERS_TBL: ${self:service}-${opt:stage, self:provider.stage}
    # SONGS_TBL: ${self:service}-${opt:stage, self:provider.stage}
    # FEATURED_ARTISTS_TBL: ${self:service}-${opt:stage, self:provider.stage}
    # PLAY_PLATFORM_TBL: ${self:service}-${opt:stage, self:provider.stage}

resources:
  Resources:
    SongsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.SONGS_TBL}
        AttributeDefinitions:
          - AttributeName: song_id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: composer
            AttributeType: S
          - AttributeName: releaseDate
            AttributeType: N
          - AttributeName: category
            AttributeType: S
          - AttributeName: length
            AttributeType: N
        KeySchema:
          - AttributeName: song_id
            KeyType: HASH
          - AttributeName: category
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        GlobalSecondaryIndexes:
          -IndexName: title
          KeySchema:
            - AttributeName: title
              Keytype: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

    # UsersTable:
    #   Type: AWS::DynamoDB::Table
    #   DeletionPolicy: Retain
    #   Properties:
    #     TableName: ${self:provider.environment.USERS_TBL}
    #     AttributeDefinitions:
    #       - AttributeName: username
    #         AttributeType: S
    #       - AttributeName: lastname
    #         AttributeType: S
    #       - AttributeName: email
    #         AttributeType: S
    #       - AttributeName: accessLevel
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: email
    #         KeyType: HASH
    #       - AttributeName: accessLevel
    #         KeyType: RANGE
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1

    # FeaturedArtistsTable:
    #   Type: AWS::DynamoDB::Table
    #   DeletionPolicy: Retain
    #   Properties:
    #     TableName: ${self:provider.environment.FEATURED_ARTISTS_TBL}
    #     AttributeDefinitions:
    #       - AttributeName: artistName
    #         AttributeType: S
    #       - AttributeName: instrument
    #         AttributeType: S
    #       - AttributeName: website
    #         AttributeType: S
    #       - AttributeName: comment
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: artistName
    #         KeyType: HASH
    #       - AttributeName: instrument
    #         KeyType: RANGE
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1

    # PlayPlatformTable:
      # Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      # Properties:
      #   TableName: ${self:provider.environment.PLAY_PLATFORM_TBL}
      #   AttributeDefinitions:
      #     - AttributeName: active
      #       AttributeType: B
      #     - AttributeName: platformName
      #       AttributeType: S
      #   KeySchema:
      #     - AttributeName: active
      #       KeyType: HASH
      #     - AttributeName: platformName
      #       KeyType: RANGE
      #   ProvisionedThroughput:
      #     ReadCapacityUnits: 1
      #     WriteCapacityUnits: 1


# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
